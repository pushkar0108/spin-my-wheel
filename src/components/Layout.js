import * as React from "react";
import Head from "next/head";
import { useDispatch, useSelector } from "react-redux";
import { CssBaseline } from "@mui/material";
import { ThemeProvider, createTheme } from '@mui/material/styles';

import { ColorModeContext } from "../themeContext";
import Snackbar from '@mui/material/Snackbar';
import Alert from '@mui/material/Alert';
import AlertTitle from '@mui/material/AlertTitle';
import Modal from '../components/Modal';
import Footer from "./Footer";
import Navigation from "./Navigation";
import ConfigurationPanel from "../components/ConfigurationPanel";
import FeedbackPanel from "../components/FeedbackPanel";
import { setShowConfigModal, setShowFeedbackModal, showSnackBar } from "../redux/features/appSlice";

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function Layout({ children }) {
  const dispatch = useDispatch();
  
  const { snackbar, showConfigModal, showFeedbackModal } = useSelector((state) => state.app);

  const [mode, setMode] = React.useState('dark');
  const colorMode = React.useMemo(
    () => ({
      toggleColorMode: () => {
        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
      },
    }),
    [],
  );

  const theme = React.useMemo(
    () =>
      createTheme({
        palette: {
          mode,
        },
      }),
    [mode],
  );

  return (
    <ColorModeContext.Provider value={colorMode}>
      <Head>
        <meta name="google-site-verification" content="0qeIngcvUH2pVGnfM-Z3nnw-VZ6lpnO7tOmtmCEbEoA" />
        {/* <meta name="description" content="Spinner Wheel" /> */}
        {/* <title>Spinner Wheel</title> */}
        <meta name="author" content="Pushkar Goel" />
        <link rel="shortcut icon" type="image/x-icon" href="/images/wheel-icon.png" />
      </Head>
      <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-T3QZ4R2X" height="0" width="0" style={{
          display: 'none',
          visibility: 'hidden',
        }}></iframe>
      </noscript>

      
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Navigation />
        {children}
        <Footer />
        <Modal
          width={{
            md: "80vw",
            lg: "60vw",
          }}
          isOpen={showConfigModal}
          handleModalClose={() => {
            dispatch(setShowConfigModal(false));
          }}
        >
          <ConfigurationPanel  />
        </Modal>

        <Modal
          width={{
            md: "80vw",
            lg: "60vw",
          }}
          isOpen={showFeedbackModal}
          handleModalClose={() => {
            dispatch(setShowFeedbackModal(false));
          }}
        >
          <FeedbackPanel  />
        </Modal>

        <Snackbar
          open={snackbar.open}
          autoHideDuration={4000}
          onClose={() => {
            dispatch(showSnackBar({ open: false }));
          }}
          message={snackbar.message}>
          <Alert severity={snackbar.severity}>
            <AlertTitle>{snackbar.title}</AlertTitle>
            {snackbar.message}
          </Alert>
        </Snackbar>
      </ThemeProvider>
    </ColorModeContext.Provider>
  )
}
